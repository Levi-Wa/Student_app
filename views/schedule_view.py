import flet as ft
import datetime
import asyncio
import httpx
import pytz
import weakref  # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥—É–ª—å –¥–ª—è —Å–ª–∞–±—ã—Ö —Å—Å—ã–ª–æ–∫

class ScheduleTab(ft.Column):
    def __init__(self, page):
        super().__init__(expand=True)
        self.page_ref = weakref.ref(page)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–∞–±—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        self.group_ids = []
        self.selected_period = "–ù–µ–¥–µ–ª—è"
        self.selected_day = None
        self.loading = False
        self.init_ui()

    @property
    def page(self):
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ —Å–ª–∞–±—É—é —Å—Å—ã–ª–∫—É
        return self.page_ref() if self.page_ref else None

    def init_ui(self):
        # –£–±—Ä–∞–Ω—ã —è–≤–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ self.page –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
        self.period_dropdown = ft.Dropdown(
            options=[
                ft.dropdown.Option("–°–µ–≥–æ–¥–Ω—è"),
                ft.dropdown.Option("–ù–µ–¥–µ–ª—è"),
                ft.dropdown.Option("–ú–µ—Å—è—Ü"),
                ft.dropdown.Option("–í—Å–µ")
            ],
            value=self.selected_period,
            on_change=self.on_period_change,
            width=150
        )

        self.refresh_button = ft.ElevatedButton(
            "–û–±–Ω–æ–≤–∏—Ç—å",
            icon=ft.icons.REFRESH,
            on_click=self.refresh_schedule
        )

        self.schedule_output = ft.Column(
            scroll=ft.ScrollMode.ALWAYS,
            expand=True
        )

        self.loading_indicator = ft.ProgressBar(visible=False)
        self.error_display = ft.Text("", color="red", visible=False)

        self.controls = [
            ft.Row([
                ft.Text("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", size=20),
                self.period_dropdown,
                self.refresh_button
            ]),
            self.loading_indicator,
            self.error_display,
            self.schedule_output
        ]


    async def on_period_change(self, e):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞"""
        self.selected_period = e.control.value
        await self.refresh_schedule()

    async def refresh_schedule(self, e=None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        if not self.group_ids:
            self.show_message("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
            return

        self.set_loading(True)
        
        try:
            schedules = await self.fetch_schedules()
            await self.display_schedules(schedules)
        except Exception as ex:
            self.show_error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(ex)}")
        finally:
            self.set_loading(False)

    def set_loading(self, loading: bool):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∑–∞–≥—Ä—É–∑–∫–∏"""
        self.loading = loading
        self.loading_indicator.visible = loading
        self.error_display.visible = False
        self.schedule_output.visible = not loading
        self.loading_indicator.update()

    async def fetch_schedules(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å API"""
        async with httpx.AsyncClient() as client:
            tasks = []
            for group_id in self.group_ids:
                url = f"https://api.ursei.su/public/schedule/rest/GetGsSched?grpid={group_id}"
                tasks.append(self.fetch_group_schedule(client, url))
            return await asyncio.gather(*tasks)

    async def fetch_group_schedule(self, client, url):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã"""
        try:
            response = await client.get(url, timeout=10.0)
            response.raise_for_status()
            return response.json()
        except Exception as ex:
            return {"error": str(ex)}

    async def display_schedules(self, schedules):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        self.schedule_output.controls.clear()
        current_date = datetime.date.today()
        tomorrow_date = current_date + datetime.timedelta(days=1)
        scroll_target = None

        for group_id, schedule in zip(self.group_ids, schedules):
            if "error" in schedule:
                self.schedule_output.controls.append(
                    ft.Text(f"–û—à–∏–±–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}: {schedule['error']}", color="red")
                )
                continue

            group_container = self.create_group_container(group_id, schedule, current_date, tomorrow_date)
            self.schedule_output.controls.append(group_container)

        await self.schedule_output.update_async()

        if scroll_target:
            await self.page.scroll_to_async(scroll_target, duration=500)

    def create_group_container(self, group_id, schedule, current_date, tomorrow_date):
        group_column = ft.Column(expand=True)  # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫—É
        group_column.controls.append(
            ft.Text(f"–ì—Ä—É–ø–ø–∞ ID: {group_id}", size=16, weight="bold")
        )

        for month in schedule.get("Month", []):
            for day in month.get("Sched", []):
                day_card = self.create_day_card(day, current_date, tomorrow_date)
                if day_card:
                    group_column.controls.append(day_card)

        return ft.Container(
            content=group_column,
            padding=10,
            border=ft.border.all(1, "#e0e0e0"),
            border_radius=5,
            margin=5,
            expand=True  # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        )

    def create_day_card(self, day, current_date, tomorrow_date):
        try:
            date_str = day.get("datePair", "")
            day_date = datetime.datetime.strptime(date_str, "%d.%m.%Y").date()
            day_week = day.get("dayWeek", "")

            color = self.get_date_color(day_date, current_date, tomorrow_date)
            lessons = self.create_lessons(day.get("mainSchedule", []))

            return ft.Container(
                content=ft.Column([
                    ft.Text(f"üìÖ {date_str} ({day_week})", weight="bold", color=color),
                    lessons
                ]),
                padding=10,
                margin=5,
                expand=True  # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
            )
        except Exception as ex:
            return ft.Text(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–Ω—è: {str(ex)}", color="red")

    def get_date_color(self, day_date, current_date, tomorrow_date):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–∞—Ç—ã"""
        if day_date == current_date:
            return "green"
        if day_date == tomorrow_date:
            return "blue"
        if day_date < current_date:
            return "grey"
        return None

    def create_lessons(self, lessons_data):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–Ω—è—Ç–∏–π"""
        return ft.Column([
            self.create_lesson_row(lesson) for lesson in lessons_data
        ])

    def create_lesson_row(self, lesson):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∑–∞–Ω—è—Ç–∏—è"""
        return ft.Row([
            ft.Text(lesson.get("TimeStart", ""), width=60),
            ft.Column([
                ft.Text(lesson.get("SubjName", ""), weight="bold"),
                ft.Text(lesson.get("LoadKindSN", ""), size=12, color="grey")
            ], expand=2),
            ft.Text(lesson.get("Aud", ""), width=60),
            ft.Text(lesson.get("FIO", ""), width=150, size=12)
        ], spacing=10)

    def show_error(self, message):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏"""
        self.error_display.value = message
        self.error_display.visible = True
        self.error_display.update()

    def show_message(self, message):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        self.schedule_output.controls = [ft.Text(message)]
        self.schedule_output.update()

    async def set_groups(self, group_ids, selected_day):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø"""
        self.group_ids = group_ids
        self.selected_day = selected_day
        await self.refresh_schedule()

    async def check_schedule_at_5pm(self):
        chelyabinsk_tz = pytz.timezone('Asia/Yekaterinburg')
        while True:
            now = datetime.datetime.now(chelyabinsk_tz)
            target_time = now.replace(hour=17, minute=0, second=0)
            
            if now > target_time:
                target_time += datetime.timedelta(days=1)
            
            await asyncio.sleep((target_time - now).total_seconds())
            if self.page:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                await self.refresh_schedule()
import flet as ft
import httpx
import asyncio
import datetime
from typing import List
import pytz  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∑–æ–Ω–∞–º–∏


class ScheduleTab(ft.Column):
    def __init__(self):
        super().__init__(expand=True)
        self.group_ids = []
        self.loading = False
        self.selected_period = "–°–µ–≥–æ–¥–Ω—è"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–±—Ä–∞–Ω "–°–µ–≥–æ–¥–Ω—è"
        self.previous_schedules = []  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π
        self.selected_day = None  # –î–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI
        self.schedule_output = ft.Column(
            scroll=ft.ScrollMode.AUTO,
            expand=True
        )

        self.period_buttons = ft.RadioGroup(
            content=[
                ft.Radio(value="–°–µ–≥–æ–¥–Ω—è", label="–°–µ–≥–æ–¥–Ω—è"),
                ft.Radio(value="–ù–µ–¥–µ–ª—è", label="–ù–µ–¥–µ–ª—è"),
                ft.Radio(value="–ú–µ—Å—è—Ü", label="–ú–µ—Å—è—Ü"),
                ft.Radio(value="–í—Å–µ", label="–í—Å–µ")
            ],
            value=self.selected_period,
            on_change=self.on_period_change
        )

        self.refresh_button = ft.ElevatedButton(
            "–û–±–Ω–æ–≤–∏—Ç—å",
            icon=ft.icons.REFRESH,
            on_click=self.refresh_schedule
        )

        self.controls = [
            ft.Row([ft.Text("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", size=20), self.period_buttons, self.refresh_button]),
            self.schedule_output
        ]

    def on_period_change(self, e):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞"""
        self.selected_period = e.control.value
        asyncio.create_task(self.refresh_schedule())

    async def refresh_schedule(self, e=None):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø"""
        if not self.group_ids:
            self.schedule_output.controls = [ft.Text("–ì—Ä—É–ø–ø—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã")]
            await self.schedule_output.update()
            return

        self.loading = True
        self.schedule_output.controls = [ft.ProgressBar(), ft.Text("–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...")]
        await self.schedule_output.update()

        try:
            schedules = await self.fetch_schedules()
            if self.previous_schedules:
                changes = self.compare_schedules(self.previous_schedules, schedules)
                if changes:
                    await self.display_changes(changes)

            await self.display_schedules(schedules)
            self.previous_schedules = schedules  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ

        except Exception as ex:
            self.schedule_output.controls = [ft.Text(f"–û—à–∏–±–∫–∞: {str(ex)}", color="red")]
            await self.schedule_output.update()
        finally:
            self.loading = False

    async def fetch_schedules(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å API"""
        async with httpx.AsyncClient() as client:
            tasks = []
            for group_id in self.group_ids:
                url = f"https://api.ursei.su/public/schedule/rest/GetGsSched?grpid={group_id}"
                tasks.append(self.fetch_group_schedule(client, url))
            return await asyncio.gather(*tasks)

    async def fetch_group_schedule(self, client, url):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã"""
        try:
            response = await client.get(url, timeout=10.0)
            response.raise_for_status()
            return response.json()
        except Exception as ex:
            return {"error": str(ex)}

    async def display_schedules(self, schedules):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"""
        self.schedule_output.controls = []

        current_date = datetime.date.today()
        tomorrow_date = current_date + datetime.timedelta(days=1)

        # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π, —Ç–æ —Å–¥–≤–∏–≥–∞–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å
        if current_date.weekday() >= 5:  # 5 - —Å—É–±–±–æ—Ç–∞, 6 - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
            current_date += datetime.timedelta(days=(7 - current_date.weekday()))  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫

        for group_id, schedule in zip(self.group_ids, schedules):
            if "error" in schedule:
                self.schedule_output.controls.append(ft.Text(f"–û—à–∏–±–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}: {schedule['error']}", color="red"))
                continue

            group_schedule = ft.Column()
            group_schedule.controls.append(ft.Text(f"–ì—Ä—É–ø–ø–∞ ID: {group_id}", size=16, weight="bold"))

            for month in schedule.get("Month", []):
                for day in month.get("Sched", []):
                    day_card = self.create_day_card(day, current_date, tomorrow_date)
                    group_schedule.controls.append(day_card)

            self.schedule_output.controls.append(
                ft.Container(content=group_schedule, padding=10, border=ft.border.all(1, "#e0e0e0"), border_radius=5, margin=5)
            )

        await self.schedule_output.update()

    def create_day_card(self, day, current_date, tomorrow_date):
        """–°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –¥–Ω—è"""
        date_str = day.get("datePair", "")
        day_week = day.get("dayWeek", "")
        day_date = datetime.datetime.strptime(date_str, "%d.%m.%Y").date()

        color = "grey"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–µ—Ä—ã–π

        if day_date == current_date:
            color = "green"  # –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å ‚Äî –∑–µ–ª–µ–Ω—ã–º
        elif day_date == tomorrow_date:
            color = "blue"  # –ó–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å ‚Äî —Å–∏–Ω–∏–º
        elif day_date < current_date:
            color = "grey"  # –ü—Ä–æ—à–µ–¥—à–∏–π –¥–µ–Ω—å ‚Äî —Å–µ—Ä—ã–º

        lessons = ft.Column()
        for lesson in day.get("mainSchedule", []):
            lessons.controls.append(self.create_lesson_row(lesson))

        return ft.Container(
            content=ft.Column([ft.Text(f"üìÖ {date_str} ({day_week})", weight="bold", color=color), lessons]),
            padding=10,
            margin=5
        )

    def create_lesson_row(self, lesson):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–Ω—è—Ç–∏–∏"""
        return ft.Row([
            ft.Text(lesson.get("TimeStart", ""), width=60),
            ft.Column([ft.Text(lesson.get("SubjName", ""), weight="bold"), ft.Text(lesson.get("LoadKindSN", ""), size=12, color="grey")], expand=2),
            ft.Text(lesson.get("Aud", ""), width=60),
            ft.Text(lesson.get("FIO", ""), width=150, size=12)
        ], spacing=10)

    def compare_schedules(self, old_schedules, new_schedules):
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å—Ç–∞—Ä–æ–µ –∏ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
        changes = []
        for old, new in zip(old_schedules, new_schedules):
            if old != new:  # –ï—Å–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
                changes.append({"old": old, "new": new})
        return changes

    async def display_changes(self, changes):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"""
        for change in changes:
            self.schedule_output.controls.append(
                ft.Text(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {change}", color="red")
            )
        await self.schedule_output.update()

    async def check_schedule_at_3am(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 3:00 –ø–æ –ú–°–ö"""
        # –ù–∞—Å—Ç—Ä–æ–∏–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É –¥–ª—è –ú–æ—Å–∫–≤—ã
        moscow_tz = pytz.timezone('Europe/Moscow')
        
        while True:
            now = datetime.datetime.now(moscow_tz)
            target_time = now.replace(hour=3, minute=0, second=0, microsecond=0)
            
            if now > target_time:
                target_time += datetime.timedelta(days=1)  # –ï—Å–ª–∏ 3:00 —É–∂–µ –ø—Ä–æ—à–ª–æ, –Ω–∞–∑–Ω–∞—á–∞–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞

            time_to_wait = (target_time - now).total_seconds()
            await asyncio.sleep(time_to_wait)  # –ó–∞—Å—ã–ø–∞–µ–º –¥–æ 3:00 –ø–æ –ú–°–ö

            # –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤—Ä–µ–º—è –Ω–∞—Å—Ç—É–ø–∏–ª–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            await self.refresh_schedule()

import flet as ft
import datetime
import asyncio
import httpx
import pytz

class ScheduleTab(ft.Control):
    def __init__(self, page: ft.Page, selected_day: datetime.date = None):
        super().__init__()
        self.page = page
        self.group_ids = []
        self.selected_day = selected_day if selected_day is not None else datetime.date.today()
        self.selected_period = "–ú–µ—Å—è—Ü"
        self.loading = False

        # –î—Ä–æ–ø–¥–∞—É–Ω –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
        self.period_dropdown = ft.Dropdown(
            options=[
                ft.dropdown.Option("–°–µ–≥–æ–¥–Ω—è"),
                ft.dropdown.Option("–ù–µ–¥–µ–ª—è"),
                ft.dropdown.Option("–ú–µ—Å—è—Ü"),
                ft.dropdown.Option("–í—Å–µ")
            ],
            value=self.selected_period,  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            on_change=self.on_period_change,  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            width=150,
            border_color="#2196F3",
            focused_border_color="#1976D2",
            filled=True,
            bgcolor="#E3F2FD"
        )

        self.schedule_output = ft.Column(scroll=ft.ScrollMode.ALWAYS, expand=True)

        self.loading_indicator = ft.ProgressBar(visible=False)
        self.error_display = ft.Text("", color="red", visible=False)

    def build(self):
        return ft.Column([
            ft.Row([
                ft.Text("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", size=20, weight="bold"),
                self.period_dropdown  # –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä–æ–ø–¥–∞—É–Ω –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            ]),
            self.loading_indicator,
            self.error_display,
            ft.Container(
                content=self.schedule_output,
                expand=True
            )
        ], expand=True)

    async def on_period_change(self, e):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –≤ Dropdown"""
        self.selected_period = e.control.value  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        print(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏–∑–º–µ–Ω—ë–Ω: {self.selected_period}")
        await self.refresh_schedule()  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        print("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
        self.update()

    async def refresh_schedule(self):
        """–û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞."""
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        self.set_loading(True)

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø
            schedules = await self.fetch_schedules()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∏ –≤ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è—Ö
            if any("error" in schedule for schedule in schedules):
                self.show_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –æ–¥–Ω–æ–π –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≥—Ä—É–ø–ø.")
                return

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            await self.display_schedules(schedules)

        except Exception as ex:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª—é–±—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            self.show_error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(ex)}")

        finally:
            # –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self.set_loading(False)
            self.update()

    async def fetch_group_schedule(self, client, url):
        try:
            response = await client.get(url, timeout=10.0)
            response.raise_for_status()
            data = response.json()
            if not data.get("Month"):
                return {"error": "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ"}
            return data
        except httpx.HTTPStatusError as e:
            return {"error": f"HTTP error: {e.response.status_code}"}
        except Exception as ex:
            return {"error": str(ex)}

    async def set_groups(self, group_ids, selected_day):
        self.group_ids = group_ids
        self.selected_day = selected_day
        await self.refresh_schedule()

    def set_loading(self, loading: bool):
        self.loading = loading
        self.loading_indicator.visible = loading
        self.error_display.visible = False
        self.schedule_output.visible = not loading
        self.update()  # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç

    async def fetch_schedules(self):
        async with httpx.AsyncClient() as client:
            tasks = []
            for group_id in self.group_ids:
                url = f"https://api.ursei.su/public/schedule/rest/GetGsSched?grpid={group_id}"
                tasks.append(self.fetch_group_schedule(client, url))
            return await asyncio.gather(*tasks)

    async def display_schedules(self, schedules):
        print(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {schedules}")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.schedule_output.controls.clear()
        current_date = self.selected_day  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
        tomorrow = current_date + datetime.timedelta(days=1)

        for group_id, schedule in zip(self.group_ids, schedules):
            if "error" in schedule:
                self.schedule_output.controls.append(
                    ft.Text(f"–û—à–∏–±–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}: {schedule['error']}", color="red")
                )
                continue

            group_column = ft.Column()
            group_column.controls.append(
                ft.Text(f"–ì—Ä—É–ø–ø–∞ ID: {group_id}", size=16, weight="bold")
            )

            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            if self.selected_period == "–í—Å–µ":
                # –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
                for month in schedule.get("Month", []):
                    # –î–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö –º–µ—Å—è—Ü–µ–≤
                    pass
            else:
                # –õ–æ–≥–∏–∫–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É
                for month in schedule.get("Month", []):
                    for day in month.get("Sched", []):
                        date_str = day.get("datePair", "")
                        if not date_str:
                            continue
                        day_date = datetime.datetime.strptime(date_str, "%d.%m.%Y").date()

                        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É
                        if self.selected_period == "–°–µ–≥–æ–¥–Ω—è" and day_date != current_date:
                            continue
                        elif self.selected_period == "–ù–µ–¥–µ–ª—è" and not (0 <= (day_date - current_date).days < 7):
                            continue
                        elif self.selected_period == "–ú–µ—Å—è—Ü" and (
                                day_date.month != current_date.month or day_date.year != current_date.year):
                            continue

                        day_card = self.create_day_card(day, current_date, tomorrow)
                        group_column.controls.append(day_card)

            self.schedule_output.controls.append(
                ft.Container(content=group_column, padding=10, bgcolor="#f9f9f9", border_radius=10, margin=5)
            )

        self.update()

    def create_day_card(self, day, current_date, tomorrow_date):
        """–°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –¥–Ω—è"""
        try:
            date_str = day.get("datePair", "")
            if not date_str:
                return ft.Text("–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞", color="red")
            day_date = datetime.datetime.strptime(date_str, "%d.%m.%Y").date()
            day_week = day.get("dayWeek", "")

            color = self.get_date_color(day_date, current_date, tomorrow_date)
            lessons = self.create_lessons(day.get("mainSchedule", []))

            return ft.Container(
                content=ft.Column([
                    ft.Text(f"üìÖ {date_str} ({day_week})", weight="bold", color=color),
                    lessons
                ]),
                padding=10,
                margin=5,
                bgcolor="#ffffff",
                border=ft.border.all(1, "#ddd"),
                border_radius=8
            )
        except Exception as ex:
            return ft.Text(f"–û—à–∏–±–∫–∞ –¥–Ω—è: {str(ex)}", color="red")

    def get_date_color(self, day_date, current_date, tomorrow_date):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –¥–ª—è –¥–∞—Ç—ã"""
        if day_date == current_date:
            return "green"
        elif day_date == tomorrow_date:
            return "blue"
        elif day_date < current_date:
            return "grey"
        else:
            return None

    def create_lesson_row(self, lesson):
        """–°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ–¥–Ω–æ–≥–æ —É—Ä–æ–∫–∞"""
        return ft.Container(
            content=ft.Row([
                ft.Text(lesson.get("TimeStart", ""), width=80),
                ft.Column([
                    ft.Text(lesson.get("SubjName", ""), weight="bold"),
                    ft.Text(lesson.get("LoadKindSN", ""), size=12, color="grey")
                ], expand=True),
                ft.Text(lesson.get("Aud", ""), width=80),
                ft.Text(lesson.get("FIO", ""), width=180, size=12)
            ], spacing=10),
            padding=5,
            border=ft.border.all(0.5, "#ccc"),
            border_radius=5,
            margin=3
        )
    def create_lessons(self, lessons_data):
        """–°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —É—Ä–æ–∫–æ–≤"""
        return ft.Column([self.create_lesson_row(lesson) for lesson in lessons_data])

    def show_error(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É"""
        self.error_display.value = message
        self.error_display.visible = True
        self.update()

    def show_message(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        self.schedule_output.controls = [ft.Text(message)]
        self.update()

    async def check_schedule_at_5pm(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ 17:00 –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
        chelyabinsk_tz = pytz.timezone("Asia/Yekaterinburg")
        previous_schedules = None  # –•—Ä–∞–Ω–∏–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ

        while True:
            now = datetime.datetime.now(chelyabinsk_tz)
            target = now.replace(hour=17, minute=0, second=0, microsecond=0)
            if now >= target:
                target += datetime.timedelta(days=1)

            await asyncio.sleep((target - now).total_seconds())

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            current_schedules = await self.fetch_schedules()

            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
            if current_schedules != previous_schedules:
                await self.display_schedules(current_schedules)
                previous_schedules = current_schedules  # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
